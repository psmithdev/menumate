// Debug utility for testing price extraction improvements
import { parseThaiMenuLine } from './thaiPriceParser';
import { parseTextToDishes } from './smartMenuParser';

// Test cases covering common Thai menu formats
const TEST_CASES = [
  // Standard format: dish name + price + ‡∏ö‡∏≤‡∏ó
  '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á 120 ‡∏ö‡∏≤‡∏ó',
  '‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏Å‡πà 85 ‡∏ö‡∏≤‡∏ó',
  '‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á 95 ‡∏ö‡∏≤‡∏ó',
  
  // Just numbers (common in menus)
  '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏õ‡∏π 140',
  '‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢ 60',
  '‡πÅ‡∏Å‡∏á‡πÄ‡∏ú‡πá‡∏î‡∏´‡∏°‡∏π 75',
  
  // Multiple sizes
  '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡∏≠‡∏¢ ‡πÄ‡∏•‡πá‡∏Å 50 ‡∏Å‡∏•‡∏≤‡∏á 70 ‡πÉ‡∏´‡∏ç‡πà 90',
  '‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß‡πÄ‡∏ô‡∏∑‡πâ‡∏≠ S 45 M 65 L 85',
  
  // Slash separated prices
  '‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡∏≤‡∏´‡∏ß‡∏≤‡∏ô 80/100/120',
  '‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢ 60/80/100 ‡∏ö‡∏≤‡∏ó',
  
  // Price ranges
  '‡∏ö‡∏∞‡∏´‡∏°‡∏µ‡πà‡πÅ‡∏´‡πâ‡∏á 70-90 ‡∏ö‡∏≤‡∏ó',
  '‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏•‡∏∏‡∏Å‡∏Å‡∏∞‡∏õ‡∏¥ 55-75',
  
  // Size in parentheses
  '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î (‡πÄ‡∏•‡πá‡∏Å) 70 ‡∏ö‡∏≤‡∏ó',
  '‡πÅ‡∏Å‡∏á‡∏à‡∏∑‡∏î (‡πÉ‡∏´‡∏ç‡πà) 120',
  
  // Price at beginning
  '150 ‡∏ö‡∏≤‡∏ó ‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏ã‡∏µ‡∏ü‡∏π‡πâ‡∏î',
  '85 ‡∏ï‡πâ‡∏°‡∏Ç‡πà‡∏≤‡πÑ‡∏Å‡πà',
  
  // Complex Thai dishes
  '‡∏¢‡∏≥‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏∏‡πâ‡∏á‡∏™‡∏î 110 ‡∏ö‡∏≤‡∏ó',
  '‡πÅ‡∏Å‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏•‡∏≤‡∏î‡∏∏‡∏Å‡πÉ‡∏™‡πà‡∏ú‡∏±‡∏Å‡∏ö‡∏∏‡πâ‡∏á 95',
  '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏ô‡πâ‡∏≥‡∏û‡∏£‡∏¥‡∏Å‡∏•‡∏á‡πÄ‡∏£‡∏∑‡∏≠ 130',
  
  // Edge cases
  '‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢', // Header - should not be detected as dish
  '‡∏£‡∏≤‡∏Ñ‡∏≤ 50-200 ‡∏ö‡∏≤‡∏ó', // Price only line
  '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡∏µ‡∏•‡∏¥‡πÄ‡∏ä‡∏µ‡∏¢‡∏™', // Restaurant name
  'üå∂Ô∏èüå∂Ô∏è ‡πÄ‡∏ú‡πá‡∏î‡∏°‡∏≤‡∏Å', // Spice indicator only
  
  // Lines with mixed content
  '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏ï‡πâ‡∏°‡∏¢‡∏≥ ‡∏û‡∏¥‡πÄ‡∏®‡∏© 140 ‡∏ö‡∏≤‡∏ó ‚≠ê',
  '‡πÅ‡∏Å‡∏á‡πÄ‡∏ú‡πá‡∏î‡∏õ‡∏•‡∏≤‡∏î‡∏∏‡∏Å üå∂Ô∏è 85',
  
  // Number-only lines (common after dish names)
  '120',
  '85',
  '200',
  
  // Incomplete/fragmented lines
  '‡∏Ç‡πâ‡∏≤‡∏ß',
  '‡∏Å‡∏∏‡πâ‡∏á 12',
  '‡πÅ‡∏Å‡∏á‡πÄ‡∏ú‡πá‡∏î ‡∏´‡∏°',
];

export function debugPriceExtraction() {
  console.log('üß™ Starting Price Extraction Debug Tests');
  console.log('=======================================');
  
  const results = {
    totalTests: TEST_CASES.length,
    validParsed: 0,
    pricesFound: 0,
    dishesIdentified: 0,
    failed: [] as string[]
  };
  
  TEST_CASES.forEach((testCase, index) => {
    console.log(`\nüìù Test ${index + 1}: "${testCase}"`);
    console.log('---'.repeat(20));
    
    try {
      const result = parseThaiMenuLine(testCase);
      
      console.log(`Result:`, {
        dishName: result.dishName,
        prices: result.prices,
        isValid: result.isValid,
        isDish: result.isDish
      });
      
      // Update statistics
      if (result.isValid) results.validParsed++;
      if (result.prices.length > 0) results.pricesFound++;
      if (result.isDish) results.dishesIdentified++;
      
      // Evaluate result quality
      const hasThaiText = /[‡∏Å-‡πô]/.test(testCase);
      const hasNumbers = /\d{2,4}/.test(testCase);
      const shouldHavePrice = hasNumbers && hasThaiText && !testCase.includes('‡πÄ‡∏°‡∏ô‡∏π') && !testCase.includes('‡∏£‡πâ‡∏≤‡∏ô');
      
      if (shouldHavePrice && result.prices.length === 0) {
        console.log('‚ö†Ô∏è  Expected price but none found');
        results.failed.push(testCase);
      } else if (result.isValid && result.prices.length > 0) {
        console.log('‚úÖ Successfully parsed with price');
      } else if (result.isDish && hasThaiText) {
        console.log('‚úÖ Correctly identified as dish (no price)');
      } else {
        console.log('‚ÑπÔ∏è  Other result');
      }
      
    } catch (error) {
      console.error('‚ùå Error parsing:', error);
      results.failed.push(testCase);
    }
  });
  
  console.log('\nüìä TEST SUMMARY');
  console.log('===============');
  console.log(`Total tests: ${results.totalTests}`);
  console.log(`Valid parses: ${results.validParsed} (${Math.round(results.validParsed/results.totalTests*100)}%)`);
  console.log(`Prices found: ${results.pricesFound} (${Math.round(results.pricesFound/results.totalTests*100)}%)`);
  console.log(`Dishes identified: ${results.dishesIdentified} (${Math.round(results.dishesIdentified/results.totalTests*100)}%)`);
  
  if (results.failed.length > 0) {
    console.log(`\n‚ùå Failed cases (${results.failed.length}):`);
    results.failed.forEach(failure => console.log(`   "${failure}"`));
  }
  
  return results;
}

// Test full menu text parsing
export function debugFullMenuParsing() {
  console.log('\nüçΩÔ∏è Testing Full Menu Parsing');
  console.log('=============================');
  
  const sampleMenuText = `‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢
‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á 120 ‡∏ö‡∏≤‡∏ó
‡πÅ‡∏Å‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏ß‡∏≤‡∏ô‡πÑ‡∏Å‡πà 85
‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á 95 ‡∏ö‡∏≤‡∏ó
‡∏™‡πâ‡∏°‡∏ï‡∏≥‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏•‡πá‡∏Å 50 ‡∏Å‡∏•‡∏≤‡∏á 70 ‡πÉ‡∏´‡∏ç‡πà 90
‡∏ú‡∏±‡∏î‡πÑ‡∏ó‡∏¢ 80/100/120 ‡∏ö‡∏≤‡∏ó
‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡∏≤‡∏´‡∏ß‡∏≤‡∏ô
85
‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ñ‡∏•‡∏∏‡∏Å‡∏Å‡∏∞‡∏õ‡∏¥ 75
‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡∏µ
‡πÅ‡∏Å‡∏á‡πÄ‡∏ú‡πá‡∏î‡∏´‡∏°‡∏π 70 ‡∏ö‡∏≤‡∏ó`;

  console.log('üìÑ Sample menu text:');
  console.log(sampleMenuText);
  console.log('');
  
  try {
    // Note: parseTextToDishes is not exported, we'll need to test the smart parser differently
    console.log('‚ö†Ô∏è Full menu parsing would require access to parseTextToDishes function');
    console.log('This should be tested through the API endpoint or by making the function exported');
  } catch (error) {
    console.error('‚ùå Error in full menu parsing:', error);
  }
}

// Performance testing
export function debugPerformance() {
  console.log('\n‚ö° Performance Testing');
  console.log('=====================');
  
  const startTime = Date.now();
  
  // Run price extraction 1000 times
  for (let i = 0; i < 1000; i++) {
    TEST_CASES.forEach(testCase => {
      parseThaiMenuLine(testCase);
    });
  }
  
  const endTime = Date.now();
  const totalTime = endTime - startTime;
  const avgTimePerParse = totalTime / (1000 * TEST_CASES.length);
  
  console.log(`Parsed ${1000 * TEST_CASES.length} lines in ${totalTime}ms`);
  console.log(`Average time per parse: ${avgTimePerParse.toFixed(3)}ms`);
  
  if (avgTimePerParse < 1) {
    console.log('‚úÖ Performance: Excellent (< 1ms per parse)');
  } else if (avgTimePerParse < 5) {
    console.log('‚úÖ Performance: Good (< 5ms per parse)');
  } else {
    console.log('‚ö†Ô∏è Performance: Could be improved (> 5ms per parse)');
  }
}

// Export a function to run all tests
export function runAllDebugTests() {
  console.log('üöÄ Running All Price Extraction Debug Tests');
  console.log('===========================================');
  
  const extractionResults = debugPriceExtraction();
  debugFullMenuParsing();
  debugPerformance();
  
  console.log('\nüèÅ All tests completed!');
  return extractionResults;
}